#!/bin/bash

export YIKES="\x1b[2m[\x1b[0;31m\xe2\x9c\x98\x1b[0;2m]\x1b[0m"
export INFO="\x1b[2m[\x1b[0;36mi\x1b[0;2m]\x1b[0m"
export GOOD="\x1b[2m[\x1b[0;32m\xe2\x9c\x94\x1b[0;2m]\x1b[0m"

yikes() { echo -e "$YIKES $*"; exit 1; }
info()  { echo -e "$INFO $*"; }
good()  { echo -e "$GOOD $*"; }

escape_name() { echo "$1" | sed -E 's/[^A-Za-z0-9]/_/g'; }
to_upper()    { printf '%s\n' "$1" | awk '{ print toupper($0) }'; }

check_for() {
	for dep in "$@"; do
		info "Checking for $dep..."
		pkg-config --exists "$dep" 2>/dev/null
		if [ $? -eq 0 ]; then
			good "Found $dep version `pkg-config --modversion "$dep"`."
			echo
		else
			yikes "Couldn't find $dep."
		fi
		upper=$(to_upper `escape_name "$dep"`)
		export LD_$upper="`pkg-config --libs "$dep"`"
		export CFLAGS_$upper="`pkg-config --cflags "$dep"`"
	done
}

add_dep() {
	for dep in "$@"; do
		upper=$(to_upper `escape_name "$dep"`)
		libs="LD_$upper"
		cflags="CFLAGS_$upper"
		printf "%-16s:= " "LD_$upper" >> Makefile
		echo ${!libs} >> Makefile
		printf "%-16s:= " "CFLAGS_$upper" >> Makefile
		echo ${!cflags} >> Makefile
		echo "DEP_LD			+= \$($libs)" >> Makefile
		echo "DEP_CFLAGS		+= \$($cflags)" >> Makefile
		echo >> Makefile
	done
}

add_include() {
	upper=$(to_upper `escape_name "$1"`)
	cflags="CFLAGS_$upper"
	printf "%-16s:= " "CFLAGS_$upper" >> Makefile
	echo ${!cflags} >> Makefile
}

add_lib() {
	upper=$(to_upper `escape_name "$1"`)
	libs="LD_$upper"
	printf "%-16s:= " "LD_$upper" >> Makefile
	echo ${!libs} >> Makefile
}

add_both() {
	add_include "$1"
	add_lib "$1"
}

init_makefile() {
	> Makefile
}

do_all() {
	check_for $*
	add_dep $*
}

init_makefile

check_for tinyxml2
add_both tinyxml2

do_all icu-uc

cat >> Makefile <<"BASE"
COMPILER		:= g++
OFLAGS			:= -g -O0
CFLAGS			:= -std=c++2a $(OFLAGS) -Wall -Wextra -fPIC
CFLAGS_ORIG		:= $(CFLAGS)
INCLUDE			:= 
LDFLAGS			:= $(strip -pthread -ldl $(DEP_LD))
CC				 = $(COMPILER) $(strip $(CFLAGS) $(CHECKFLAGS))
CHECKFLAGS		:=
MKBUILD			:= mkdir -p build
OUTPUT			:= build/spjalla
MAINLIB			 = build/libspjalla.$(SHARED_EXT)
SHARED_EXT		:= so
SHARED_FLAG		:= -shared
LIBPATHVAR		:= LD_LIBRARY_PATH
LIBPATH			 = $(LIBPATHVAR)="`pwd`/build"
DEBUGGER		?= lldb

ifeq ($(shell uname -s), Darwin)
	SHARED_EXT	:= dylib
	SHARED_FLAG	:= -dynamiclib
	LIBPATHVAR	:= DYLD_LIBRARY_PATH
endif

ifeq ($(CHECK), asan)
	CHECKFLAGS := -fsanitize=address -fno-common
else ifeq ($(CHECK), msan)
	CHECKFLAGS := -fsanitize=memory -fno-common
endif

.PHONY: all test clean depend spotless count plugins dperf eperf

all: $(OBJECTS) $(OUTPUT)

INCLUDE_SR		:= -Istrender/include
SOURCES_SR		:= $(shell find strender/src -name '*.cpp' | sed -nE '/(tests?|test_.+|ansi|futil)\.cpp$$/!p')
OBJECTS_SR		:= $(patsubst strender/src/%.cpp,strender/build/%.o,$(SOURCES_SR))

INCLUDE_PP		:= -Ipingpong/include
SOURCES_PP		:= $(shell find pingpong/src -name '*.cpp' | sed -nE '/(tests?|test_.+|ansi|futil)\.cpp$$/!p')
OBJECTS_PP		:= $(patsubst pingpong/src/%.cpp,pingpong/build/%.o,$(SOURCES_PP))

INCLUDE_HN		:= -Ihaunted/include
SOURCES_HN		:= $(shell find haunted/src -name '*.cpp' | sed -nE '/(tests?|test_.+|ansi|futil)\.cpp$$/!p')
OBJECTS_HN		:= $(patsubst haunted/src/%.cpp,haunted/build/%.o,$(SOURCES_HN))

INCLUDE_SP		:= -Iinclude
SOURCES_SP		:= $(shell find -L src -name '*.cpp' | sed -nE '/(^src\/plugins\/)|((tests?|test_.+)\.cpp$$)/!p')
OBJECTS_SP		:= $(patsubst src/%.cpp,build/%.o,$(SOURCES_SP))
INCLUDE_LIBS	:= $(INCLUDE_SR) $(INCLUDE_PP) $(INCLUDE_HN)

SOURCES_PL		:= $(shell ls src/plugins | sed -nE '/\./!p' | sed -E 's/(.+)/src\/plugins\/\1\/\1.cpp/')
OBJECTS_PL		:= $(addsuffix .$(SHARED_EXT),$(addprefix build/plugins/,$(shell ls src/plugins)))

OBJECTS			= $(OBJECTS_SR) $(OBJECTS_PP) $(OBJECTS_HN) $(OBJECTS_SP)

ALLFLAGS		 = $(CPPFLAGS) $(CXXFLAGS) $(DEP_CFLAGS)

sinclude $(shell find src -name 'targets.mk')

plugins: $(OBJECTS_PL)

strender/build/%.o: strender/src/%.cpp
	@ mkdir -p "$(shell dirname "$@")"
	$(CC) $(strip $(ALLFLAGS) $(INCLUDE_SR)) -c $< -o $@

pingpong/build/%.o: pingpong/src/%.cpp
	@ mkdir -p "$(shell dirname "$@")"
	$(CC) $(strip $(ALLFLAGS) $(INCLUDE_PP)) -c $< -o $@

haunted/build/%.o: haunted/src/%.cpp
	@ mkdir -p "$(shell dirname "$@")"
	$(CC) $(strip $(ALLFLAGS) $(INCLUDE_HN)) -c $< -o $@

build/%.o: src/%.cpp
	@ mkdir -p "$(shell dirname "$@")"
	$(CC) $(strip $(ALLFLAGS) $(INCLUDE_SP) $(INCLUDE_LIBS)) -c $< -o $@


define PLUGINRULE
build/plugins/$P.$(SHARED_EXT): $(patsubst %.cpp,%.o,$(addprefix build/plugins/$P/,$(filter %.cpp,$(shell ls "src/plugins/$P")))) $(MAINLIB)
	$(CC) $(SHARED_FLAG) $$+ -o $$@ $(LDFLAGS)
endef

$(foreach P,$(notdir $(shell find src/plugins -mindepth 1 -maxdepth 1 -type d '!' -exec test -e "{}/targets.mk" ';' -print)),$(eval $(PLUGINRULE)))


test: $(OUTPUT)
	$(LIBPATH) ./$(OUTPUT) --plugins build/plugins

dbg: $(OUTPUT)
	$(LIBPATH) $(DEBUGGER) $(OUTPUT) -- --plugins build/plugins

grind: $(OUTPUT)
	$(LIBPATH) valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --show-reachable=no ./$(OUTPUT) --plugins build/plugins

massif: $(OUTPUT)
	$(LIBPATH) valgrind --tool=massif --threshold=0.001 ./$(OUTPUT) --plugins build/plugins

strip:
	strip -x {$(OUTPUT),$(MAINLIB),build/plugins/*.$(SHARED_EXT)}
	strip -x build/test_* 2>/dev/null || true

dperf: # Disable performance measurements
	rm -f build/lib/formicine/performance.o
	CPPFLAGS="-DDISABLE_PERFORMANCE" make build/lib/formicine/performance.o

eperf: # Enable performance measurements
	rm -f build/lib/formicine/performance.o
	CPPFLAGS="" make build/lib/formicine/performance.o

clean:
	rm -rf build
	$(MAKE) -C pingpong clean
	$(MAKE) -C haunted clean
	if [ -e .log ]; then > .log; fi

spotless:
	rm -rf build pingpong/build haunted/build .log $(DEPFILE)

count:
	cloc src include pingpong/src pingpong/include haunted/src haunted/include formicine

countbf:
	cloc --by-file src include pingpong/src pingpong/include haunted/src haunted/include formicine

DEPFILE  = .dep
DEPTOKEN = "\# MAKEDEPENDS"
DEPFLAGS = -f $(DEPFILE) -s $(DEPTOKEN)

depend:
	@ echo $(DEPTOKEN) > $(DEPFILE)
	makedepend $(DEPFLAGS) -- $(CC) $(strip $(INCLUDE_LIBS) $(INCLUDE_SP) $(MDEP_INCLUDE)) -- $(SOURCES_SR) $(SOURCES_PP) $(SOURCES_HN) $(SOURCES_SP) $(SOURCES_TESTS) $(SOURCES_PL) 2>/dev/null
	@ sed -i.sed 's/^src\//build\//' $(DEPFILE)
	@ sed -i.sed -E 's/^(pingpong|haunted|strender)\/src\//\1\/build\//' $(DEPFILE)
	@ sed -i.sed '/\/usr\/include\//d' $(DEPFILE)
	@ rm $(DEPFILE).bak $(DEPFILE).sed

sinclude $(DEPFILE)
BASE

good "Wrote Makefile."
